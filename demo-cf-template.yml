Resources:
  FunctionsDemoRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: 
        - PolicyName: publish-sns-put-dynamodb
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt TableDemo.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref TopicDemo
      RoleName: awsd-officialcourse-demo-aws-xray-rolefunctions
      Tags: 
        - Key: Course
          Value: AWSD

  QueueDemo:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: awsd-officialcourse-demo-aws-xray-queue
      Tags: 
        - Key: Course
          Value: AWSD

  TableDemo:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        -
          AttributeName: "awsRequestId"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        -
          AttributeName: "awsRequestId"
          KeyType: "HASH"
      TableName: awsd-officialcourse-demo-aws-xray-table
      Tags: 
        - Key: Course
          Value: AWSD
  
  TopicDemo:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Demo AWSD
      Subscription: 
        - Endpoint: domingo@allincloudservices.com
          Protocol: email
        - Endpoint: !GetAtt QueueDemo.Arn
          Protocol: sqs
      Tags: 
        - Key: Course
          Value: AWSD
      TopicName: awsd-officialcourse-demo-aws-xray-topic

  APIDemo:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: awsd-officialcourse-demo-aws-xray-api
      Tags: 
        - Key: Course
          Value: AWSD

  Function1Demo:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: |
          exports.handler = async (event) => {
            // TODO implement
            throw new Error('Error premeditado')
            const response = {
                statusCode: 200,
                body: JSON.stringify(event),
            };
            return response;
          };
      Environment: 
        Variables:
          table_name: !Ref TableDemo
      FunctionName: awsd-officialcourse-demo-aws-xray-function1
      Handler: index.handler
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt FunctionsDemoRole.Arn
      Runtime: nodejs12.x
      TracingConfig:
        Mode: Active
      Tags: 
        - Key: Course
          Value: AWSD
      Timeout: 5

  Function2Demo:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: |
          exports.handler = async (event) => {
            // TODO implement
            throw new Error('Error premeditado')
            const response = {
                statusCode: 200,
                body: JSON.stringify(event),
            };
            return response;
          };
      Environment: 
        Variables:
          table_name: !Ref TableDemo
      FunctionName: awsd-officialcourse-demo-aws-xray-function2
      Handler: index.handler
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt FunctionsDemoRole.Arn
      Runtime: nodejs12.x
      TracingConfig:
        Mode: Active
      Tags: 
        - Key: Course
          Value: AWSD
      Timeout: 5

  Function1DemoInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref Function1Demo
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - arn:aws:execute-api:us-east-1:864613434505:${APIID}/*/GET/
        - { APIID: !Ref APIDemo }

  Function2DemoInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref Function2Demo
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt BucketDemo.Arn

  BucketDemo:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: awsd-officialcourse-demo-aws-xray-bucket
      # NotificationConfiguration: 
      #   LambdaConfigurations:
      #     - Event: s3:ObjectCreated:*
      #       Filter:
      #         S3Key:
      #           Rules:
      #             - Name: suffix
      #               Value: .jpg
      #       Function: !GetAtt Function2Demo.Arn
      Tags: 
        - Key: Course
          Value: AWSD

  SNSHttpEndpointServer:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref SNSHttpEndpointServerProfile
      ImageId: ami-09e67e426f25ce0d7
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      Tags:
        - Key: Course
          Value: AWSD
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            apt install nodejs -y
            sudo apt install npm -y

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable HTTP access via port 80'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
  
  SNSHttpEndpointServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Demo